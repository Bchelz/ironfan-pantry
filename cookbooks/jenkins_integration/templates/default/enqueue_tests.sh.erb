#!/usr/bin/env bash
#
# Advance changes into testing, or bomb if no changes
# 
source `dirname $0`/shared.inc
set -o errexit

# FIXME: It'd be nice if this didn't die except on a true error,
#   and instead conditionally triggered the downstream on changes.
# FIXME: This dodges the need for rake *:version:bump in homebases. 
#   Add that, then come back and make this work with homebases as 
#   well.
no_changes=0
h1 "Find and validate new pantry changes, or die:"
for name in $PANTRIES; do
  h2 `switch_to $name`

  # if echo $name | grep homebase;
  # then cookbooks='org_cookbooks';
  # else cookbooks='cookbooks'; fi
  cookbooks='cookbooks'

  changes=`git diff --name-only staging -- $cookbooks/*/ | cut -d/ -f2 | sort | uniq`
  if [ "x$changes" = "x" ]; then
    item "No cookbook changes between master and staging"
    continue
  fi

  item "Changes found: $changes"
  no_changes=1

  item "Ensure changes have version bump"
  for cookbook in $changes; do
    if git diff --quiet staging -- cookbooks/$cookbook/VERSION; then
      warning "Changes found but no version change in $cookbook"
      rake $cookbook:version:bump
    fi
  done
done
if [ no_changes ]; then failure 1 "ERROR: No changes found for testing"; fi

h1 "Get all cookbooks into place in homebases:"
staging="staging_cookbooks"
testing="cookbooks"
change_all_branches "staging"
install_berkshelves $staging
change_all_branches "master"
install_berkshelves $testing

h1 "Record the testing cookbook versions:"
for name in $HOMEBASES; do
  h2 `switch_to $name`

  VERSIONS=environments/inc/cookbook_versions.rb
  cat $ROOT_DIR/cookbook_versions.rb.h > $VERSIONS
  for cookbook in `ls -1d $testing/*/ | cut -d/ -f2`; do
    version=`cat $testing/$cookbook/VERSION`
    echo -e "\$cookbooks['$cookbook']\t= '$version'" >> $VERSIONS
  done
  git commit $VERSIONS -m"$VERSIONS: updating testing cookbook versions"
done

h1 "Push updates to development:"
for name in $ALL_PATHS; do
  h2 `switch_to $name`
  git pull
  git push origin master
done

h1 "Advance all changes to testing (after ensuring proper matryoshka):"
change_all_branches "testing"
for name in $ALL_PATHS; do
  h2 `switch_to $name`
  if ! git merge staging | grep 'Already up-to-date' > /dev/null; then
    echo "FATAL: master is not a descendant of staging" >&2
    exit 1
  fi
  git merge master
  git push origin testing
done

h1 "Find, validate, upload, and freeze changed cookbooks:"
for name in $HOMEBASES; do
  h2 `switch_to $name`
  changed=''
  for cookbook in `ls -1d $testing/*/ | cut -d/ -f2`; do
    test_cb=$testing/$cookbook
    stage_cb=$staging/$cookbook
    # If $testing/$cookbook and $staging/$cookbook aren't identical
    no_change="diff -qr"
    if ! $no_change $test_cb $stage_cb > /dev/null 2>&1; then
      # make sure VERSIONs aren't identical either
      if $no_change $test_cb/VERSION $stage_cb/VERSION > /dev/null 2>&1; then
        failure 1 "testing version of $cookbook has changes, but same VERSION as staging"
      fi
      changed="$changed$cookbook "
    fi
  done
  if [ "nothing$changed" == "nothing" ]; then
    warning "Nothing changed - very suspicious"
    continue
  fi
  h2 "Upload and freeze changed cookbooks: $changed"
  knife cookbook upload -V --freeze --force $changed
done

h1 "Upload testing environment"
for name in $HOMEBASES; do
  h2 `switch_to $name`
  knife environment from file testing.rb
done

h1 "Uploading changed roles (test universe only):"
item `switch_to $TEST_PATH`
changed=''
for file in `git diff --name-only staging roles/`; do
  # Don't treat a removed role as changed
  if [ -f $file ]; then
    rake role from file $file
    changed="$changed$file "
  fi
done
if [ "nothing$changed" == "nothing" ]; then
  item "Nothing changed"
fi

success "All tests enqueued successfully"