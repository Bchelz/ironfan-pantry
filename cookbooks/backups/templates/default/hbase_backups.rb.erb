#!/usr/bin/env ruby

require 'yaml'

class Hbase_Backup

  def initialize(dt)
    @dt = dt
  end
 
  def backup(table, start, versions, type)

    `sudo -u hdfs hbase org.apache.hadoop.hbase.mapreduce.Export -D mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec -D mapred.output.compression.type=BLOCK -D mapred.output.compress=true #{table} /tmp/backups.#{@dt}/#{table}.#{type}/ #{versions} #{start}`
  end 

end

def s3(bucket, dt)
  `hadoop fs -mkdir s3n://#{bucket}/hbase_backups/#{dt}/`
  `sudo -u hdfs hadoop fs -cp /tmp/backups.#{dt}/* s3n://#{bucket}/hbase_backups/#{dt}/`
  `sudo -u hdfs hadoop fs -rmr /tmp/backups.#{dt}`
end

config = YAML::load(File.open('<%= @node[:backups][:hbase][:conf] %>', 'r').read())
tables = config['tables']
versions = config['backups']['versions']

dt = Date.today().strftime("%Y%m%d")
today = Date.today().strftime("%A")
start = nil
type = nil

tables.each do |table|
  if config.has_key?(table)
    full = config[table]['full']
    diff = config[table]['differential'] 
    incr = config[table]['incrimental'] 
  else
    full = config['default']['full']
    diff = config['default']['differential']
    incr = config['default']['incrimental']
  end
 
  last_full = full.last
  last_diff = diff.last
  hour_offset = config['backups']['offset']

  if full.include? today
    start = 0 
    type = 'full'
  elsif diff.include? today
    start = `date -d "last-#{last_full}" +%s`.chomp # This is hacky, but it works...  
    type = 'differential'
  elsif incr.include? today
    start = `date -d "last-#{last_diff}" +%s`.chomp
    type = 'incrimental'
  end
    
  backup = Hbase_Backup.new(dt)  
  backup.backup(table, start, versions, type)

end
  
s3(config['backups']['s3'], dt)
