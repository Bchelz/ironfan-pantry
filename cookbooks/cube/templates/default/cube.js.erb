'use strict';

var configs = {};

//
//Shared configuration
//
configs.common = {
  "mongo-host": "<%= @mongodb[:host] %>",
  "mongo-port": 27017,
  "mongo-database": "<%= @mongodb[:database] %>",
  "mongo-username": null,
  "mongo-password": null,
  "mongo-server_options": {auto_reconnect: true, poolSize: 8, socketOptions: { noDelay: true }},

  "mongo-metrics":  {autoIndexId: true},
  "mongo-events":   {capped: true, size: 1e9, autoIndexId: true},

  "separate-events-database": true,

  "horizons": {
    "calculation":              1000 * 60 * 60 * 2, // 2 hours
    "invalidation":             1000 * 60 * 60 * 1, // 1 hour
    "forced_metric_expiration": <%= node[:cube][:mongodb][:expire_metrics_horizon] %>, // 7 days
  }
};


//
// Collector configuration
//
configs.collector = {
  "http-port": process.env.PORT || <%= @collector[:http_port] %>,
  "udp-port": 1180,
  "authenticator": "<%= @collector[:authenticate] ? "mongo_cookie" : "allow_all" %>"
}


//
// Evaluator configuration
//
configs.evaluator = {
  "http-port": process.env.PORT || <%= @evaluator[:http_port] %>,
  "authenticator":  "<%= @evaluator[:authenticate] ? "mongo_cookie" : "allow_all" %>"
}


//
// Warmer configuration
//
configs.warmer = {
  "warmer-interval": 1000 * 60,
  "warmer-tier":     1000 * 10
}

var options = {};
Object.defineProperty(options, "include", {
    enumerable: false,
    value: function() {
      for(var config_name in arguments){
        var config = configs[arguments[config_name]];
        for(var prop in config)
          if(config.hasOwnProperty(prop))
            options[prop] = config[prop];
      };
      return options;
    }
});

module.exports = options.include('common');